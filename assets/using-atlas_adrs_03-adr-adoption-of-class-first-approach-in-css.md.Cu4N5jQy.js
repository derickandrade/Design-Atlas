import{_ as e,c as i,o as a,ag as t}from"./chunks/framework.-tXfabtl.js";const g=JSON.parse('{"title":"ADR-03 - Adoption of the class-first approach in CSS","description":"","frontmatter":{},"headers":[],"relativePath":"using-atlas/adrs/03-adr-adoption-of-class-first-approach-in-css.md","filePath":"using-atlas/adrs/03-adr-adoption-of-class-first-approach-in-css.md"}'),n={name:"using-atlas/adrs/03-adr-adoption-of-class-first-approach-in-css.md"};function o(l,s,r,p,c,d){return a(),i("div",null,s[0]||(s[0]=[t(`<h1 id="adr-03-adoption-of-the-class-first-approach-in-css" tabindex="-1">ADR-03 - Adoption of the class-first approach in CSS <a class="header-anchor" href="#adr-03-adoption-of-the-class-first-approach-in-css" aria-label="Permalink to &quot;ADR-03 - Adoption of the class-first approach in CSS&quot;">​</a></h1><p><strong>Date:</strong> 31-05-2025 <strong>Status:</strong> Proposed</p><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>In the development of the Foundation design system for OpenStreetMap, we are building a visual foundation that is accessible, internationalizable, and consistent across multiple interfaces. We have already defined the use of <strong>Design Tokens</strong> as the source of truth for colors, spacing, typography, and other visual values (ADR-01).</p><p>With the use of Svelte (ADR-02), we have full control over the markup and applied styles, which allows us to adopt a more declarative and explicit approach. The <strong>class-first</strong> strategy (or utility-first), inspired by frameworks like Tailwind CSS, proposes that styles be applied directly via utility classes instead of component-scoped CSS or global styles.</p><p>This approach aligns with the use of previously defined tokens and themes, making visual decisions visible in the markup and eliminating ambiguity between style layers.</p><h2 id="considered-actions" tabindex="-1">Considered actions <a class="header-anchor" href="#considered-actions" aria-label="Permalink to &quot;Considered actions&quot;">​</a></h2><ul><li><p><strong>Maintain traditional per-component styles (CSS Modules or scoped styles):</strong> maintains encapsulation but makes visual consistency, reuse, and token tracking more difficult.</p></li><li><p><strong>CSS-in-JS (e.g., styled-components, emotion):</strong> Powerful integration between logic and style, but adds unnecessary complexity in Svelte and makes it harder to extract themes or tokens.</p></li><li><p><strong>Class-first approach with tokens (e.g., Tailwind-like, using utility classes mapped to tokens):</strong> Brings the interface closer to the design system and facilitates maintenance and auditing.</p></li></ul><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><p>We will adopt a <strong>class-first</strong> approach in CSS, using tokens directly in CSS classes. This approach will be aligned with the tokens defined in Atlas, ensuring consistency, semantic clarity, and compositional flexibility.</p><p>Example:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;header-1 regular&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Title&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body-md color-danger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Body text&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>Tokens used in these examples:</p><ul><li><p><code>header-1, body</code>: typographic styles</p></li><li><p><code>regular</code>: color <code>{gray-500}</code></p></li><li><p><code>regular</code>: weight defined in typography <code>{regular (400)}</code></p></li><li><p><code>color-danger</code>: color defined for destructive actions.</p></li></ul><h2 id="consequences" tabindex="-1"><strong>Consequences</strong> <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;**Consequences**&quot;">​</a></h2><p><strong>Positive:</strong></p><ul><li><p>Increases traceability of tokens in the code.</p></li><li><p>Facilitates dynamic theming and real-time style switching.</p></li><li><p>Avoids CSS scope conflicts and simplifies style architecture.</p></li><li><p>Brings the style layer closer to design decisions.</p></li></ul><p><strong>Negative:</strong></p><ul><li><p>The learning curve may be steeper for those coming from BEM or traditional CSS.</p></li><li><p>HTML markup may initially appear more verbose.</p></li><li><p>Requires strict standardization in class naming derived from tokens.</p></li></ul><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next steps&quot;">​</a></h2><ul><li><p>Create documentation mapping tokens to utility classes.</p></li><li><p>Define naming conventions for token-based classes (<code>color-primary</code>, <code>bgn-success</code>, etc.).</p></li><li><p>Automate the generation of classes from the JSON tokens using tools like Style Dictionary or custom build scripts.</p></li></ul>`,21)]))}const u=e(n,[["render",o]]);export{g as __pageData,u as default};
