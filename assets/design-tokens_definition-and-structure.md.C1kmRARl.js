import{_ as n,c as s,o,ag as a}from"./chunks/framework.-tXfabtl.js";const t="/docs/assets/using-tokens.B8G9sOL3.png",i="/docs/assets/what-are-design-tokens-from-visual-styles-to-tokens.DPXbKkEK.png",r="/docs/assets/what-are-design-tokens-global-token.DSFG561I.png",c="/docs/assets/what-are-design-tokens-theme-token.B7jr5OB2.png",k=JSON.parse('{"title":"Definition and Structure","description":"","frontmatter":{},"headers":[],"relativePath":"design-tokens/definition-and-structure.md","filePath":"design-tokens/definition-and-structure.md"}'),d={name:"design-tokens/definition-and-structure.md"};function l(p,e,h,m,g,u){return o(),s("div",null,e[0]||(e[0]=[a('<h1 id="definition-and-structure" tabindex="-1">Definition and Structure <a class="header-anchor" href="#definition-and-structure" aria-label="Permalink to &quot;Definition and Structure&quot;">​</a></h1><h2 id="_1-what-are-design-tokens" tabindex="-1">1. What are design tokens? <a class="header-anchor" href="#_1-what-are-design-tokens" aria-label="Permalink to &quot;1. What are design tokens?&quot;">​</a></h2><p>Design tokens are the smallest units that store the visual guidelines and design decisions that characterize our system. More importantly, tokens document the intended context of use assigned to a specific style, and enable the application of the correct visual value to a specific component property. This is how tokens help to bridge the gap between implementation and design.</p><p>Tokens are used to:</p><ol><li><p><strong>Define the visual style of components</strong>: since tokens capture the system’s stylistic attributes, they provide guidance to define the styles (background colors, text formatting, sizes, spacing…) of new system components from scratch.</p></li><li><p><strong>Codify design styles</strong>: Designers use tokens to specify all the visual styles and interactive properties of a given component. These design decisions are translated to code. For more details regarding the use of design tokens for design specification, refer to the section dedicated to specification hand-off to development in the <a href="./../contributing/designing-new-components.html">Designing Components</a> documentation.</p></li></ol><p><img src="'+t+'" alt="schematic image of Button component with tokens used therein"></p><h3 id="from-visual-styles-to-tokens-in-design-and-code" tabindex="-1">From visual styles to tokens in design and code <a class="header-anchor" href="#from-visual-styles-to-tokens-in-design-and-code" aria-label="Permalink to &quot;From visual styles to tokens in design and code&quot;">​</a></h3><p>Design system components are made up of a combination of predefined perceptual patterns. These patterns result from the consistent application of preselected styles such as colors, shadows, or spacing values, to specific UI elements and properties like backgrounds, borders, or paddings.</p><p>At its core, Atlas is made up of a set of visual styles derived from the <a href="./../style-guide/overview.html">style guide</a> principles. Colors, typography, shadows and spacings are aligned with the style guide, and documented as tokens in the system. Design tokens are thus the smallest building blocks of the system: they define, document and enable the application of systemic design decisions at scale.</p><p><img src="'+i+'" alt="step diagram from visual style to tokens"></p><h3 id="token-typologies" tabindex="-1">Token typologies <a class="header-anchor" href="#token-typologies" aria-label="Permalink to &quot;Token typologies&quot;">​</a></h3><p>There are three types of tokens, depending on their function and level of abstraction:</p><h4 id="global-tokens" tabindex="-1">global tokens <a class="header-anchor" href="#global-tokens" aria-label="Permalink to &quot;global tokens&quot;">​</a></h4><p>Option tokens are context-agnostic tokens that encapsulate the primitive visual foundations of the system. Their name does not reflect a specific use case, rather they use the simplest possible name. They have raw values, e.g. <code>olive-500: #57814c</code></p><p><img src="'+r+'" alt="option token naming scheme: category, name and value"></p><p>Global tokens are not used to style components. Their only purpose is to document raw values, and to be consumed by the next token typology: theme tokens.</p><div class="warning custom-block"><p class="custom-block-title">Prefix only in Figma</p><p>In Figma, Colors and Typography are used as prefixes to organize design tokens, but these prefixes are typically removed when the tokens are transformed into CSS variables</p></div><h4 id="theme-tokens" tabindex="-1">Theme tokens <a class="header-anchor" href="#theme-tokens" aria-label="Permalink to &quot;Theme tokens&quot;">​</a></h4><p>Theme tokens consume global tokens as values. They represent design decisions that can be reused to style system components. For this reason, theme tokens are documented in our <a href="./../style-guide/theme.html">Theme token demo</a>. They communicate their intended use case via their name (so are not agnostic, like option tokens), e.g. <code>border-color-accent</code>.</p><p><img src="'+c+'" alt="decision token naming scheme: property, category and variant"></p><p>Decision tokens are used to style system components and elements.</p><h4 id="component-decision-tokens" tabindex="-1">Component decision tokens <a class="header-anchor" href="#component-decision-tokens" aria-label="Permalink to &quot;Component decision tokens&quot;">​</a></h4><p>In the context of Atlas, component tokens are used to document and define specific component styles that cannot be documented as shared decisions due to their single-use application. The names of component tokens include the name of the specific component and the property they define. Like decision tokens, they consume option tokens as values, e.g. <code>color-link-visited: purple-600</code>.</p><p>Component tokens embody exceptions, and are directly applied to style specific component properties. If a pattern arises (i.e. the component token can be used by several components), the single-use component token can be converted into a theme token.</p><h2 id="_2-tokens-in-design" tabindex="-1">2. Tokens in design <a class="header-anchor" href="#_2-tokens-in-design" aria-label="Permalink to &quot;2. Tokens in design&quot;">​</a></h2><h3 id="from-design-to-implementation" tabindex="-1">From design to implementation <a class="header-anchor" href="#from-design-to-implementation" aria-label="Permalink to &quot;From design to implementation&quot;">​</a></h3><p>Designers can access an overview of Atlas foundational styles and principles, along with their token translation, in the <a href="https://www.figma.com/design/2vheURjyvYg2oyBeuQOxQ1/%F0%9F%92%A0-Atlas---Design-System?m=auto&amp;t=zXhsNI5KObVWIEyg-1" target="_blank" rel="noreferrer">Atlas Figma library</a>. By enabling this library in their project’s Figma files, designers can reuse the Atlas visual principles as Figma styles and variables when creating components and compositions.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Please note that tokens are context-specific: use them accordingly to the intended purpose expressed by their name. E.g. Apply content colors only to text.</p></div><p>During implementation, engineers will be able to follow the design specifications in Figma (whether these are presented explicitly, or via the Inspect panel) and use the correct design tokens as values of the component’s CSS properties.</p><p><img src="'+t+'" alt="Design tokens when applied in code, here screenshot of primary button variant"></p><p>Please find all current design system token category demos in this section of the Atlas docs, starting at <a href="./border.html">Border</a> and ending at <a href="./spacing.html">Spacing</a>.</p>',31)]))}const y=n(d,[["render",l]]);export{k as __pageData,y as default};
