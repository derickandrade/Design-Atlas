import{_ as t,c as i,o,ag as a}from"./chunks/framework.-tXfabtl.js";const m=JSON.parse('{"title":"Constructing forms","description":"","frontmatter":{},"headers":[],"relativePath":"style-guide/constructing-forms.md","filePath":"style-guide/constructing-forms.md"}'),s={name:"style-guide/constructing-forms.md"};function n(l,e,r,d,c,u){return o(),i("div",null,e[0]||(e[0]=[a('<h1 id="constructing-forms" tabindex="-1">Constructing forms <a class="header-anchor" href="#constructing-forms" aria-label="Permalink to &quot;Constructing forms&quot;">​</a></h1><p>A general guide for creating forms in <strong>Atlas</strong> using the <strong>OSM Foundation</strong> design system. A form consists of at least one <strong>Field</strong>.</p><h2 id="usability-accessibility-and-inclusion" tabindex="-1">Usability, Accessibility, and Inclusion <a class="header-anchor" href="#usability-accessibility-and-inclusion" aria-label="Permalink to &quot;Usability, Accessibility, and Inclusion&quot;">​</a></h2><p>Forms should be as usable, accessible, and inclusive as possible. This isn&#39;t just an ethical consideration - it increases form submission success rates. The primary goal of any form is to enable users to complete and submit it with comfort and confidence.</p><ol><li><strong>Keep fields simple:</strong> Don&#39;t overcomplicate field functionality or logic. Use existing Atlas components for data input needs.</li><li><strong>Request only essential information.</strong> Avoid asking for data like email or gender unless absolutely necessary.</li><li>When collecting such information, consider the differences between <strong>sex</strong> and <strong>gender</strong>.</li><li><strong>Labels</strong> should always be visible and associated with inputs. This improves readability and aids navigation.</li><li>Avoid using disabled buttons as a validation method.</li><li>Don&#39;t impose <strong>time limits</strong> for form completion.</li><li>Avoid hiding forms inside components like Accordions when completion is mandatory, regardless of screen size.</li><li>All fields are considered <strong>required by default</strong>. Optional fields should be marked with &quot;(optional)&quot; in the label. The Label component has this functionality built-in.</li></ol><h2 id="layout" tabindex="-1">Layout <a class="header-anchor" href="#layout" aria-label="Permalink to &quot;Layout&quot;">​</a></h2><h3 id="width" tabindex="-1">Width <a class="header-anchor" href="#width" aria-label="Permalink to &quot;Width&quot;">​</a></h3><p>The form and its fields should occupy <strong>100% of the parent container&#39;s width</strong>. For long forms with available horizontal space, they may be divided into sections using a <strong>Table of Contents</strong>.</p><p>Fields can have a maximum width of <code>size-420</code> (equivalent to 26.25rem) when not using a table of contents. Regardless, all fields should maintain <strong>consistent width</strong>.</p><p>Other components within the form (tables, accordions) may occupy <strong>100% width</strong> of their container.</p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>Headers and footers should always span 100% of the page or module width.</p></div><h3 id="format" tabindex="-1">Format <a class="header-anchor" href="#format" aria-label="Permalink to &quot;Format&quot;">​</a></h3><p>Forms may contain fields in different formats: <strong>multi-column</strong>, <strong>fieldsets</strong>, and <strong>modules</strong>. Label font weight may vary based on desired visual hierarchy.</p><ul><li><strong>Top labels</strong> should be used to maintain natural reading flow.</li><li>Visually hidden labels may be used for specific accessible cases.</li></ul><h4 id="multi-column" tabindex="-1">Multi-column <a class="header-anchor" href="#multi-column" aria-label="Permalink to &quot;Multi-column&quot;">​</a></h4><p>Use when:</p><ul><li>Fields are related (e.g., &quot;First Name&quot; and &quot;Last Name&quot;)</li><li>Translations won&#39;t significantly affect input sizes</li><li>Avoid boxing horizontal fields - use reduced spacing between them instead</li></ul><h4 id="fieldsets" tabindex="-1">Fieldsets <a class="header-anchor" href="#fieldsets" aria-label="Permalink to &quot;Fieldsets&quot;">​</a></h4><p>Related groups like <strong>checkboxes</strong> and <strong>radio buttons</strong> should be organized in a <code>fieldset</code> with corresponding <code>legend</code>.</p><h4 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;Modules&quot;">​</a></h4><p>Modules may wrap the entire form or sections to highlight areas with:</p><ul><li>Border</li><li>Subtle background color (<code>bgn-base</code>)</li><li><code>border-radius-4</code> from base tokens</li></ul><p>Related fields like &quot;Start Date&quot; and &quot;End Date&quot; may be grouped in a module labeled &quot;Duration.&quot;</p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>Module labels should be <strong>bold</strong>, while internal labels use regular weight to indicate hierarchy.</p></div><h2 id="conditional-and-nested-fields" tabindex="-1">Conditional and Nested Fields <a class="header-anchor" href="#conditional-and-nested-fields" aria-label="Permalink to &quot;Conditional and Nested Fields&quot;">​</a></h2><p>Fields that appear based on another field&#39;s selection should be <strong>indented by 16px</strong> per nesting level.</p><p>When selecting options like &quot;Other&quot; in radio/checkbox groups, the additional field should appear <strong>immediately below</strong> the selected option, aligned with its label.</p><h2 id="form-elements" tabindex="-1">Form Elements <a class="header-anchor" href="#form-elements" aria-label="Permalink to &quot;Form Elements&quot;">​</a></h2><h3 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h3><p>May be used to divide long forms. It should be:</p><ul><li>Aligned to the page start</li><li>Contain links to internal sections</li><li>Use <code>border-color-base</code> for section heading bottom borders</li></ul><div class="warning custom-block"><p class="custom-block-title">Caution:</p><p>Don&#39;t use alongside side navigation bars to avoid usability conflicts.</p></div><h2 id="footer" tabindex="-1">Footer <a class="header-anchor" href="#footer" aria-label="Permalink to &quot;Footer&quot;">​</a></h2><p>Should be fixed to the viewport bottom with background and top border, keeping primary actions always accessible.</p><ul><li>Primary action should be a <strong>Primary Button</strong></li><li>Secondary actions may use <strong>Tertiary Buttons</strong> (neutral color)</li><li>Destructive actions require <strong>Danger Button</strong></li><li>Actions should be left-aligned with the primary button right in the group</li><li>Footers with table of contents should match field width, not TOC width</li></ul><p>Include any <strong>disclaimer</strong> above the submit button.</p><h2 id="validation" tabindex="-1"><strong>Validation</strong> <a class="header-anchor" href="#validation" aria-label="Permalink to &quot;**Validation**&quot;">​</a></h2><h3 id="best-practices" tabindex="-1"><strong>Best Practices</strong> <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;**Best Practices**&quot;">​</a></h3><ul><li>Use <strong>inline validation</strong> or validation on submission</li><li>Avoid disabled buttons as submission blockers</li><li>After failed submission, show error message above submit button</li><li>This message should disappear when errors are corrected</li></ul><h3 id="inline-validation" tabindex="-1"><strong>Inline Validation</strong> <a class="header-anchor" href="#inline-validation" aria-label="Permalink to &quot;**Inline Validation**&quot;">​</a></h3><p>May be used for immediate feedback.</p><h3 id="key-translation-features" tabindex="-1">Key Translation Features: <a class="header-anchor" href="#key-translation-features" aria-label="Permalink to &quot;Key Translation Features:&quot;">​</a></h3><ol><li>Maintained all technical terms and component names</li><li>Preserved the structured hierarchy with clear sectioning</li><li>Kept design system tokens intact (<code>size-420</code>, <code>bgn-base</code>, etc.)</li><li>Used active voice for clearer instructions</li><li>Maintained consistent terminology (e.g., &quot;viewport&quot; instead of &quot;view port&quot;)</li><li>Added explanatory notes where helpful without changing meaning</li></ol>',43)]))}const g=t(s,[["render",n]]);export{m as __pageData,g as default};
